#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<conio.h>
#define N 9
void data();
void central_tendency();
void variation();
void max_min();
void corr_reg();
void prediction();
struct data
{
	char a[1034][2000];
};
struct sset
{
	double year[12],popul[12],birth[12],death[12];
};
void read_1(struct data *dat)
{
	FILE *fp=fopen("Data.csv","r");
	do
	{
		char csv[2000];
		fgets(csv,2000,(FILE*)fp);
		getdata(csv,dat);
	}while((getc(fp))!=EOF);
	fclose(fp);
}
void getdata(char csv[],struct data *dat)
{
	static int i=0;
	char *token=strtok(csv,",");
	while(token!=NULL)
	{
		strcpy(dat->a[i],token);
		token=strtok(NULL,",");
		i++;
	}
}
void sep(struct sset *b,struct data *a)
{
	int i,k=0,l=0;
	for(i=4,k=0;i<45,k<12;i=i+4,k++)
	{
		b->year[k]=atof(a->a[i]);
	}
	for(i=5,k=0;i<46,k<12;i=i+4,k++)
	{
		b->popul[k]=atof(a->a[i]);
	}
	for(i=6,k=0;i<47,k<12;i=i+4,k++)
	{
		b->birth[k]=atof(a->a[i]);
	}
	for(i=7,k=0;i<48,k<12;i=i+4,k++)
	{
		b->death[k]=atof(a->a[i]);
	}
}
void data(struct sset *s1)
{
	int i;
	    printf("\nYEAR\tPOPULATION\tBIRTH-RATE\tDEATH-RATE");
	for(i=0;i<11;i++)
	{
		printf("\n%0.2f\t%0.2f\t%0.2f\t%0.2f",s1->year[i],s1->popul[i],s1->birth[i],s1->death[i]);
	}
}
void central_tendency(struct sset *m)
{
	printf("\n Central tendency calculation");
	int i,j,n=11,k=0,k1=0,k2=0,c=1,c1=1,c2=1,max=0,mode,max1=0,max2=0,mode1,mode2;
	double b[12]={0.0},b1[12]={0.0},b2[12]={0.0};
	double x=0.0,x1=0.0,x2=0.0,sum=0.0,sum1=0.0,sum2=0.0,y=0.0,y1=0.0,y2=0.0,t;
	//mean calculation
	for(i=0;i<n;i++)
	{
		sum+=m->popul[i];
		sum1+=m->birth[i];
		sum2+=m->death[i];
	}
	x=(double)sum/(float)n;
	x1=(double)sum1/(float)n;
	x2=(double)sum2/(float)n;
	printf("\n mean(population)=%0.2f",x);
	printf("\n mean(birth)=%0.2f",x1);
	printf("\n mean(death)=%0.2f",x2);
	//median calculation
	//population
	for(i=0;i<n;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(m->popul[i]>m->popul[j])
			{
				t=m->popul[i];
				m->popul[i]=m->popul[j];
				m->popul[j]=t;
			}
		}
	}
	if(n%2==0)
	y=(double)(m->popul[n/2]+m->popul[(n-1)/2])/2;
	else
	y=m->popul[(n-1)/2];
	printf("\nMedian(population)=%0.2f",y);
	//median calculation
	//birth
	for(i=0;i<n;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(m->birth[i]>m->birth[j])
			{
				t=m->birth[i];
				m->birth[i]=m->birth[j];
				m->birth[j]=t;
			}
		}
	}
	if(n%2==0)
	y1=(double)(m->birth[n/2]+m->birth[(n-1)/2])/2;
	else
	y1=m->birth[(n-1)/2];
	printf("\nMedian(birth)=%0.2f",y1);
	//median calculation
	//death
	for(i=0;i<n;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(m->death[i]>m->death[j])
			{
				t=m->death[i];
				m->death[i]=m->death[j];
				m->death[j]=t;
			}
		}
	}
	if(n%2==0)
	y2=(double)(m->death[n/2]+m->death[(n-1)/2])/2;
	else
	y2=m->death[(n-1)/2];
	printf("\nMedian(death)=%0.2f",y2);
	//mode calculation
	//population
	for(i=0;i<n-1;i++)
	{
		mode=0;
		for(j=0;j<n;j++)
		{
			if(m->popul[i]==m->popul[j])
			{
				mode++;
			}
		}
		if((mode>max)&&(mode!=0))
		{
			k=0;
			max=mode;
			b[k]=m->popul[i];
			k++;
		}
		else if(mode==max)
		{
			b[k]=m->popul[i];
			k++;
		}
	}
	for(i=0;i<n;i++)
	{
		if(m->popul[i]==b[i])
		c++;
	}
	if(c==n)
	printf("\nThere is no mode");
	else
	{
		printf("\nMode(population)=");
		for(i=0;i<k;i++)
		{
			printf("%d",b[i]);
		}
	}
	//mode calculation
	//birth
	for(i=0;i<n-1;i++)
	{
		mode1=0;
		for(j=0;j<n;j++)
		{
			if(m->birth[i]==m->birth[j])
			{
				mode1++;
			}
		}
		if((mode1>max1)&&(mode1!=0))
		{
			k1=0;
			max1=mode1;
			b1[k1]=m->birth[i];
			k1++;
		}
		else if(mode1==max1)
		{
			b1[k1]=m->birth[i];
			k1++;
		}
	}
	for(i=0;i<n;i++)
	{
		if(m->birth[i]==b1[i])
		c1++;
	}
	if(c1==n)
	printf("\nThere is no mode");
	else
	{
		printf("\nMode(birth)=");
		for(i=0;i<k1;i++)
		{
			printf("%d",b1[i]);
		}
	}
	//mode calculation
	//death
	for(i=0;i<n-1;i++)
	{
		mode2=0;
		for(j=0;j<n;j++)
		{
			if(m->death[i]==m->death[j])
			{
				mode2++;
			}
		}
		if((mode2>max2)&&(mode2!=0))
		{
			k=0;
			max2=mode2;
			b2[k2]=m->death[i];
			k2++;
		}
		else if(mode2==max2)
		{
			b2[k2]=m->death[i];
			k2++;
		}
	}
	for(i=0;i<n;i++)
	{
		if(m->death[i]==b2[i])
		c2++;
	}
	if(c2==n)
	printf("\nThere is no mode");
	else
	{
		printf("\nMode(death)=");
		for(i=0;i<k2;i++)
		{
			printf("%d",b2[i]);
		}
	}
}
void variation(struct sset *sd)
{
	int i,n=11;
	double ssum=0,ssum1=0,ssum2=0;
	double smean=0.0,smean1=0.0,smean2=0.0,nu[20]={0.0},nu1[20]={0.0},nu2[20]={0.0},snum=0.0,snum1=0.0,snum2=0.0,sd0=0.0,sd1=0.0,sd2=0.0;
	//population
	for(i=0;i<n;i++)
	{
		ssum=ssum+sd->popul[i];
	}
	smean=(double)ssum/(float)n;
	for(i=0;i<n;i++)
	{
		nu[i]=(sd->popul[i]-smean);
	}
	for(i=0;i<n;i++)
	{
		snum+=(nu[i]*nu[i]);
	}
	sd0=sqrt(snum/n-1);
	printf("\nStandard deviation(population)=%f",sd0);
	//birth
	for(i=0;i<n;i++)
	{
		ssum1=ssum1+sd->birth[i];
	}
	smean1=(double)ssum1/(float)n;
	for(i=0;i<n;i++)
	{
		nu1[i]=(sd->birth[i]-smean1);
	}
	for(i=0;i<n;i++)
	{
		snum1+=(nu1[i]*nu1[i]);
	}
	sd1=sqrt(snum1/n-1);
	printf("\nStandard deviation(birth)=%f",sd1);
    //death
	for(i=0;i<n;i++)
	{
		ssum2=ssum2+sd->death[i];
	}
	smean2=(double)ssum2/(float)n;
	for(i=0;i<n;i++)
	{
		nu2[i]=(sd->death[i]-smean2);
	}
	for(i=0;i<n;i++)
	{
		snum2+=(nu2[i]*nu2[i]);
	}
	sd2=sqrt(snum2/n-1);
	printf("\nStandard deviation(population)=%f",sd2);
}
void max_min(struct sset *mi)
{
	int i,n=11;
	double pmax=0,pmin=0,pmax1=0,pmin1=0,pmax2=0,pmin2=0;
	int mpos=0,mpos1=0,mpos2=0,mpos3=0,mpos4=0,mpos5=0;
	//population
	pmax=mi->popul[0];
	pmin=mi->popul[0];
	for(i=0;i<n;i++)
	{
		if(mi->popul[i]>pmax)
		{
			pmax=mi->popul[i];
			mpos=i;
		}
	}
	for(i=0;i<n;i++)
	{
		if(mi->popul[i]<pmin)
		{
			pmin=mi->popul[i];
			mpos1=i;
		}
   }
	printf("\n The maximum population is %f and in the year %d",pmax,mi->year[mpos]);
	printf("\n The minimum population is %f and in the year %d",pmin,mi->year[mpos1]);
	//birth
	pmax1=mi->birth[0];
	pmin1=mi->birth[0];
	for(i=0;i<n;i++)
	{
		if(mi->birth[i]>pmax)
		{
			pmax1=mi->birth[i];
			mpos2=i;
		}
	}
	for(i=0;i<n;i++)
	{
		if(mi->birth[i]<pmin1)
		{
			pmin1=mi->birth[i];
			mpos3=i;
		}
   }
	printf("\n The maximum birth rate is %f and in the year %d",pmax1,mi->year[mpos2]);
	printf("\n The minimum birth rate is %f and in the year %d",pmin1,mi->year[mpos3]);
	//death
	pmax=mi->death[0];
	pmin=mi->death[0];
	for(i=0;i<n;i++)
	{
		if(mi->death[i]>pmax2)
		{
			pmax2=mi->death[i];
			mpos4=i;
		}
	}
	for(i=0;i<n;i++)
	{
		if(mi->death[i]<pmin2)
		{
			pmin2=mi->death[i];
			mpos5=i;
		}
   }
	printf("\n The maximum population is %f and in the year %d",pmax2,mi->year[mpos4]);
	printf("\n The minimum population is %f and in the year %d",pmin2,mi->year[mpos5]);
}
void corr_reg(struct sset *co)
{
    int i,choice;
    float xsum=0.0,ysum=0.0,xmean=0.0,ymean=0.0,diff[12]={0.0},diff_1[12]={0.0},num=0.0,denom=0.0,b,a,denom_1=0.0,denom_2=0.0,corr=0.0;
    printf("\n 1.Correlation and Regression between population and birth rate");
    printf("\n 2.Correlation and Regression between population and death rate");
    printf("\n Enter your choice :");
    scanf("%d",&choice);
    if(choice==1)
    {
        for(i=0;i<11;i++)
            {
                xsum+=co->birth[i];
                ysum+=co->popul[i];
            }
	    xmean=xsum/11.0;
	    ymean=ysum/11.0;
	    for(i=0;i<11;i++)
            {
                diff[i]=co->birth[i]-xmean;
                diff_1[i]=co->popul[i]-ymean;
            }
        for(i=0;i<11;i++)
            {
                num+=(diff[i]*diff_1[i]);
                denom+=(diff[i]*diff[i]);
                denom_1+=(diff_1[i]*diff_1[i]);
            }
        b=num/denom;
	    a=ymean-(b*xmean);
	    denom_2=sqrt(denom*denom_1);
	    corr=num/denom_2;
	    printf("\n The required equation is:Y=%.2f+%.2fX",a,b);
	    printf("\n Correlation(population and birth) :%.2f",corr);
	    getch();
    }
    else if(choice==2)
    {
        for(i=0;i<11;i++)
            {
                xsum+=co->death[i];
                ysum+=co->popul[i];
            }
	    xmean=xsum/11.0;
	    ymean=ysum/11.0;
	    for(i=0;i<11;i++)
            {
                diff[i]=co->death[i]-xmean;
                diff_1[i]=co->popul[i]-ymean;
            }
        for(i=0;i<11;i++)
            {
                num+=(diff[i]*diff_1[i]);
                denom+=(diff[i]*diff[i]);
                denom_1+=(diff_1[i]*diff_1[i]);
            }
        b=num/denom;
	    a=ymean-(b*xmean);
	    denom_2=sqrt(denom*denom_1);
	    corr=num/denom_2;
        printf("\n The required equation is:Y=%.2f+%.2fX",a,b);
	    printf("\n Correlation(population and death) :%.2f",corr);
	    getch();
    }
}
void prediction(struct sset *p1)
{
	double pdenom,y;
	int i;
	int x,n=11;
	double pxsum=0.0,pysum=0.0,pxmean=0.0,pymean=0.0,rxdiff[11]={0.0},rydiff[11]={0.0},pnum=0.0,e,f;
	//prediction using regression equation
	//regression between year and population
	printf("\n Enter the value of x(year):");
	scanf("%d",&x);
	for(i=0;i<n;i++)
	{
		pxsum+=p1->year[i];
		pysum+=p1->popul[i];
	}
	pxmean=pxsum/n;
	pymean=pysum/n;
	for(i=0;i<n;i++)
	{
		rxdiff[i]=p1->year[i]-pxmean;
		rydiff[i]=p1->popul[i]-pymean;
	}
	for(i=0;i<n;i++)
	{
		pnum+=(rxdiff[i]*rydiff[i]);
		pdenom+=(rxdiff[i]*rxdiff[i]);
	}
	f=pnum/pdenom;
	e=pymean-(f*pxmean);
	y=e+(f*x);
	printf("\n The predicted population is:%f",y);
	getch();
	printf("\n");
}
void main()
{
	struct sset tam;
	struct data a1;
	read_1(&a1);
	sep(&tam,&a1);
	    int choice;
	    printf("\n");
	    printf("\n****************POPULATION PREDICTION OF TAMILNADU IN 2019*****************");
	    while(1)
	    {
	    	printf("\n 1.Show data");
	    	printf("\n 2.Central tendency");
	    	printf("\n 3.Variation");
	    	printf("\n 4.Maximum,minimum");
	    	printf("\n 5.Correlation and regression");
	    	printf("\n 6.Prediction");
	    	printf("\n 7.Exit");
	    	printf("Enter your choice:");
	    	scanf("%d",&choice);
	    	switch(choice)
	    	{
	    		case 1:data(&tam);break;
	    		case 2:central_tendency(&tam);break;
	    		case 3:variation(&tam);break;
	    		case 4:max_min(&tam);break;
	    		case 5:corr_reg(&tam);break;
	    		case 6:prediction(&tam);break;
	    		case 7:printf("*******THANKYOU*******");
	    		getch();
	    		exit(0);break;
			}
		}
}
